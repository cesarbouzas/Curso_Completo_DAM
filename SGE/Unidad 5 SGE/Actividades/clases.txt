# -*- coding: utf-8 -*-
class Mueble: # el primer parámetro siempre self en todos 
	def __init__(self, tipo): # Constructor
                           self.tipo = tipo #Propiedad pública
                  def getTipo(self): # método getter
	         return self.tipo
	def setTipo(self, tipo): # método setter
	         self.tipo = tipo

mu = Mueble(3) # Llamamos al constructor pero no usamos self en ninguno al llamar  
print "Mueble(3)"
print "El tipo es (método):", mu.getTipo( )
print "El tipo es (propiedad):", mu.tipo

# HERENCIA 
class Mesa(Mueble):
def	__init__(self, tipo, color):
	Mueble.__init__(self, tipo) # Llamamos al padre para inicializar
	self.color = color #nuestra propiedad 
def getColor(self): #nuestros métodos
	return self.color 
def setColor(self, color): 
	self.color = color

ms = Mesa(5, 7) 
print "Mesa(5,7)"
print "El tipo es:", ms.getTipo() #método del padre 
print "El color es:", ms.getColor() #método de la clase hija

#SOBRESCRITURA DE MÉTODOS
class Mesa2(Mueble): 
   def __init__(self, tipo, color): 
        Mueble.__init__(self, tipo)
        self.color = color 
   def getColor(self): 
        return self.color
   def setColor(self, color):
        self.color = color 
   def getTipo(self): #sobrescribimos el padre 
        return self.tipo + 1

ms2 = Mesa2(5, 7) 
print "Mesa2(5,7)"
print "El tipo es:", ms2.getTipo()
print "El color es:", ms2.getColor() 

# NO EXISTE NADA PRIVADO
class UnaPrivada:
    def __init__(self):
        self.__Privada = 1 # Supuesta variable privada
        self.Publica = 2

pr = UnaPrivada()
print "Pública:", pr.Publica
# print "Privada:",pr.__Privada #Lanza una excepción
print "Privada:", pr._UnaPrivada__Privada # Se puede acceder, se ha renombrado


#PROPIEDADES 
class Propiedades:
    def __init__(self, dia):
        self.__d = dia; #propiedad__d que almacenará el valor privada
    def __getDia(self): #llamado al establecer dia, no se puede usar directamente
        return self.__d
    def __setDia(self, dia): #llamado al recoger dia, no se puede usar directamente
        self.__d = dia
    dia = property(__getDia,__setDia) #Propiedad dia creada

d = Propiedades(3) 
print "Día antes:", d.dia 
d.dia = 7
#print "Día después:",d.__getDia() ##Excepción
print "Día después:", d.dia #nueva propiedad

